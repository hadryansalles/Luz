#version 450

#extension GL_GOOGLE_include_directive : enable

#include "LuzCommon.h"

layout(push_constant) uniform _constants {
    VolumetricLightConstants ctx;
};

layout (local_size_x = 32, local_size_y = 32) in;

// todo: put in some header
vec3 DepthToWorld(vec2 screenPos, float depth) {
    vec4 clipSpacePos = vec4(screenPos*2.0 - 1.0, depth, 1.0);
    vec4 viewSpacePos = sceneBlock.inverseProj*clipSpacePos;
    viewSpacePos /= viewSpacePos.w;
    vec4 worldSpacePos = sceneBlock.inverseView*viewSpacePos;
    return worldSpacePos.xyz;
}

// todo: put in some header
vec4 BlueNoiseSample(ivec2 pixelPos, int i) {
    vec2 blueNoiseSize = textureSize(textures[scene2.blueNoiseTexture], 0);
    ivec2 fragUV = ivec2(mod(pixelPos, blueNoiseSize));
    return fract(texelFetch(textures[scene2.blueNoiseTexture], fragUV, 0) + GOLDEN_RATIO*(128*i + ctx.frame%128));
}

float EvaluateShadow(LightBlock light, vec3 samplePos) {
    if (light.type == LIGHT_TYPE_POINT) {
        vec3 lightToFrag = samplePos - light.position;
        float shadowDepth = texture(cubeTextures[light.shadowMap], lightToFrag).r;
        if (length(lightToFrag) - 0.05 >= shadowDepth * light.zFar) {
            return 1.0f;
        } else {
            return 0.0f;
        }
    } else {
        vec4 sampleInLight = (light.viewProj[0] * vec4(samplePos, 1));
        float shadowDepth = texture(textures[light.shadowMap], (sampleInLight.xy * 0.5 + vec2(0.5f, 0.5f))).r;
        if (sampleInLight.z >= shadowDepth) {
            return 1.0f;
        } else {
            return 0.0f;
        }
    }
}

void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    if (pixelPos.x >= ctx.imageSize.x || pixelPos.y >= ctx.imageSize.y) {
        return;
    }

    vec2 pixelUV = pixelPos / vec2(ctx.imageSize);
    float pixelDepth = texture(textures[ctx.depthRID], pixelUV).r;
    vec3 worldPos = DepthToWorld(pixelUV, pixelDepth);
    vec3 camPos = sceneBlock.camPos;
    vec3 radiance = vec3(0);

    for (int i = 0; i < sceneBlock.numLights; i++) {
        LightBlock light = sceneBlock.lights[i];
        if (light.volumetricType != VOLUMETRIC_TYPE_SHADOW_MAP) {
            continue;
        }

        float weight = 0.000005;
        int samples = 128; // todo: push constants
        float decay = 1.0;
        float density = 1.094;
        vec3 deltaPos = (camPos - worldPos) * density * (1.0 / float(samples));
        vec3 samplePos = camPos + BlueNoiseSample(pixelPos, 0).r * length(deltaPos);
        for (int i = 0; i < samples; i++) {
            samplePos -= deltaPos;
            radiance += (1.0 - EvaluateShadow(light, samplePos)) * light.color * light.intensity * weight * decay;
            decay *= 1.0;
        }
    }
    vec4 rgba = imageLoad(images[ctx.lightRID], pixelPos);
    rgba += vec4(radiance, 0);
    imageStore(images[ctx.lightRID], pixelPos, rgba);
}